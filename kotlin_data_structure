//Kotlin Input
    println("Enter your name")
    val name = readLine()
    println("Enter your age")
    val age : Int = Integer.valueOf(readLine())
    println("your name is $name and your age is $age")
//Input funcs
    val name = readLine() --- to read string
//for other input other than string
    val read = Scanner(System.`in`)
    var age = read.nextInt() -- to read integer
    println("your input age is $age")
    The other data types Boolean, Float, Long and Double uses nextBoolean(), nextFloat(), nextLong() and nextDouble() to get input from user.
//Comments
    // abcd -- single line comment
    /* abcd  */ -- multi line comment
//if-else
    //single line
        val result = if (num1 > num2) "$num1 is greater than $num2" else "$num1 is smaller than $num2"  
    //nested
        val result = if (num > 0) {
         "$num is positive"
        } else if (num < 0) {
         "$num is negative"
        } else {
         "$num is zero"
            }    
//when
    var number = -12
    when(number) {
        3, 4, 5, 6 -> {
            println("It is summer season")
            println("It is a good weather")
        }
        7, 8, 9 -> {
            println("It is rainy season")
        }
        10, 11 ->
            println("It is autumn season")
        12, 1, 2 ->
            println("It is winter season")
        else -> println("invalid input")
    } 
    //using range
        var number = -6
        when(number) {
            in 1..5 -> println("Input is provided in the range 1 to 5")
            in 6..10 -> println("Input is provided in the range 6 to 10")
            else -> println("none of the above")
            }
//bracket
    we dont need bracket for single line execution in kotlin
//for loop
    val marks = arrayOf(10,20,30,70,50,60)
    for (item in marks)
        println(item)
    //using indices
        val marks = arrayOf(80,85,60,90,70)  
        for(item in marks.indices)  
        println("marks[$item]: "+ marks[item])
   //Iterate through range
        for (i in 1..5) print(i) = 12345
        for (i in 5..1) print(i) = 
        for (i in 5 downTo 1) print(i) = 54321
        for (i in 5 downTo 2) print(i) = 5432
        for (i in 1..5 step 2) print(i) = 135 //just add 2 to each step
        for (i in 5 downTo 1 step 2) print(i) = 531 //just subtract 2 to each step
//range
    .. is used to give range
//increment operator
    var i = 5
    println(++i) -- it will increase i by 1 then print it  //just follow the view
    println(i++) -- it will print i then increase by 1
//while loop
    var i = 1
    while (i<=5){
        println(i)
        ++i
    }
//do while loop  -- it will execute atleast once then check the condition
    var i = 100
    do {
        println(i)
        ++i
    }while (i<=5)
//Kotlin Return and Jump    
    //Break Expression
        //It terminates the nearest enclosing ----loop-----
        for (i in 1..5) { -->>1,2
        if (i == 3) {  
            break  
            }  
           println(i)  
         }  
    //Kotlin Labeled break Expression
    //it is same as break only label will be added eg :- loop@. It will terminate the body of label identifier.
        loop@ for (i in 1..3) {                  
        for (j in 1..3) {  
            println("i = $i and j = $j")  
            if (i == 2)  
                break@loop  
                 }  
             }  
       //i = 1 and j = 1
        i = 1 and j = 2
        i = 1 and j = 3
        i = 2 and j = 1
    //Continue Expression
        Kotlin, continue statement is used to repeat the loop. It continues the current flow of the program and skips the remaining code at specified condition.
        The continue statement within a nested loop only affects the inner loop.
        for (i in 1..3) {
        println("i = $i")
        if (i==2)
          continue
            println("this is below if")
            }
        //i = 1
        this is below if
        i = 2
        i = 3
        this is below if
    //Labeled Continue Expression
        same as continue just it will continue from ---label---
        labelname@ for (i in 1..3) {  
        for (j in 1..3) {  
        println("i = $i and j = $j")  
        if (i == 2) {  
            continue@labelname  
        }  
        println("this is below if")  
        }  
        }
    //i = 1 and j = 1
    this is below if
    i = 1 and j = 2
    this is below if
    i = 1 and j = 3
    this is below if
    i = 2 and j = 1
    i = 3 and j = 1
    this is below if
    i = 3 and j = 2
    this is below if
    i = 3 and j = 3
    this is below if   
