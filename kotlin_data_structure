//Kotlin Input
    println("Enter your name")
    val name = readLine()
    println("Enter your age")
    val age : Int = Integer.valueOf(readLine())
    println("your name is $name and your age is $age")
//Input funcs
    val name = readLine() --- to read string
//for other input other than string
    val read = Scanner(System.`in`)
    var age = read.nextInt() -- to read integer
    println("your input age is $age")
    The other data types Boolean, Float, Long and Double uses nextBoolean(), nextFloat(), nextLong() and nextDouble() to get input from user.
//Comments
    // abcd -- single line comment
    /* abcd  */ -- multi line comment
//if-else
    //single line
        val result = if (num1 > num2) "$num1 is greater than $num2" else "$num1 is smaller than $num2"  
    //nested
        val result = if (num > 0) {
         "$num is positive"
        } else if (num < 0) {
         "$num is negative"
        } else {
         "$num is zero"
            }    
//when
    var number = -12
    when(number) {
        3, 4, 5, 6 -> {
            println("It is summer season")
            println("It is a good weather")
        }
        7, 8, 9 -> {
            println("It is rainy season")
        }
        10, 11 ->
            println("It is autumn season")
        12, 1, 2 ->
            println("It is winter season")
        else -> println("invalid input")
    } 
    //using range
        var number = -6
        when(number) {
            in 1..5 -> println("Input is provided in the range 1 to 5")
            in 6..10 -> println("Input is provided in the range 6 to 10")
            else -> println("none of the above")
            }
//bracket
    we dont need bracket for single line execution in kotlin
//for loop
    val marks = arrayOf(10,20,30,70,50,60)
    for (item in marks)
        println(item)
    //using indices
        val marks = arrayOf(80,85,60,90,70)  
        for(item in marks.indices)  
        println("marks[$item]: "+ marks[item])
   //Iterate through range
        for (i in 1..5) print(i) = 12345
        for (i in 5..1) print(i) = 
        for (i in 5 downTo 1) print(i) = 54321
        for (i in 5 downTo 2) print(i) = 5432
        for (i in 1..5 step 2) print(i) = 135 //just add 2 to each step
        for (i in 5 downTo 1 step 2) print(i) = 531 //just subtract 2 to each step
//range
    .. is used to give range
//increment operator
    var i = 5
    println(++i) -- it will increase i by 1 then print it  //just follow the view
    println(i++) -- it will print i then increase by 1
//while loop
    var i = 1
    while (i<=5){
        println(i)
        ++i
    }
//do while loop  -- it will execute atleast once then check the condition
    var i = 100
    do {
        println(i)
        ++i
    }while (i<=5)
//Kotlin Return and Jump    
    //Break Expression
        //It terminates the nearest enclosing ----loop-----
        for (i in 1..5) { -->>1,2
        if (i == 3) {  
            break  
            }  
           println(i)  
         }  
    //Kotlin Labeled break Expression
    //it is same as break only label will be added eg :- loop@. It will terminate the body of label identifier.
        loop@ for (i in 1..3) {                  
        for (j in 1..3) {  
            println("i = $i and j = $j")  
            if (i == 2)  
                break@loop  
                 }  
             }  
       //i = 1 and j = 1
        i = 1 and j = 2
        i = 1 and j = 3
        i = 2 and j = 1
    //Continue Expression
        Kotlin, continue statement is used to repeat the loop. It continues the current flow of the program and skips the remaining code at specified condition.
        The continue statement within a nested loop only affects the inner loop.
        for (i in 1..3) {
        println("i = $i")
        if (i==2)
          continue
            println("this is below if")
            }
        //i = 1
        this is below if
        i = 2
        i = 3
        this is below if
    //Labeled Continue Expression
        same as continue just it will continue from ---label---
        labelname@ for (i in 1..3) {  
        for (j in 1..3) {  
        println("i = $i and j = $j")  
        if (i == 2) {  
            continue@labelname  
        }  
        println("this is below if")  
        }  
        }
    //i = 1 and j = 1
    this is below if
    i = 1 and j = 2
    this is below if
    i = 1 and j = 3
    this is below if
    i = 2 and j = 1
    i = 3 and j = 1
    this is below if
    i = 3 and j = 2
    this is below if
    i = 3 and j = 3
    this is below if   
//function
    //Parameterize Function and Return Value
    If a function does not returns any value than its return type is Unit. It is optional to specify the return type of function definition which does not returns any value.
    //code
    printResult(6)
        }
    fun printResult(a:Int) {
    println(a)
    }
    //output
    6
    //code
    val result = sum(5, 6)  
    print(result)  
    }  
    fun sum(number1: Int, number2:Int): Int{  
        val add = number1+number2  
    return add  
    }  
    //output
    11
    //Recursion Function
    Recursion function is a function which calls itself continuously. This technique is called recursion.
    fun main() {
     rec()
    }
    var count = 0
    fun rec() {
    count++
    if (count<=5)  {
        println("hello " +count)
        rec()
    }
    }
    //output
    hello 1
    hello 2
    hello 3
    hello 4
    hello 5
//Argument
    //Default Argument
    If a function is called without passing any argument than default argument are used as parameter of function definition.
    And when a function is called using argument, than the passing argument is used as parameter in function definition.
    //code
    fun main() {
    example() -> value of a is 7 and value of b is hello
    example(10) -> value of a is 10 and value of b is hello
    example(30,"chandra") -> value of a is 30 and value of b is chandra
    }
    fun example(a: Int = 7, b: String = "hello") {
    println("value of a is $a and value of b is $b")
    }
    //Named Argument
    A named argument is an argument in which we define the name of argument in the function call.
    The name defined to argument of function call checks the name in the function definition and assign to it.
    //code
    fun main() {
    example("chandra")  -> Kotlin: Type mismatch: inferred type is String but Int was expected
    example(c = "chandra") -> Kotlin: Cannot find a parameter with this name: c
    example(b = "chandra") -> value of a is 7 and value of b is chandra
    } 
    fun example(a: Int = 7, b: String = "hello") {
    println("value of a is $a and value of b is $b")
    }
//Lambdas Expressions and Anonymous Functions
    A function without name is called anonymous function. For lambda expression we can say that it is anonymous function.
    //code
     val company = { println("GeeksforGeeks")}
    company()
    //output
    GeeksforGeeks
    //syntax
    val lambda_name : Data_type = { argument_List -> code_body }
    //code
    val sum1 = {a:Int,b:Int -> a+b}
    println(sum1(3,4))
    val mul:(Int,Int) -> Int = {a,b -> a*b}
    println(mul(4,5))
    //output
    7
    20
    We must explicitly declare the type of our lambda expression. If lambda returns no value then we can use: Unit
    //code
    val result: (Int) -> Unit = { a -> println(a)}
    result(8)
    //output
    8
    //Note
    Best practice is to pass type of arguments and let complier return type automatically
    you can treat it as normal func eg - write code after "->"
    -> num = a+b
    println(num)
// Higher-Order Functions
    High order function (Higher level function) is a function which accepts function as a parameter or returns a function or can do both.
    Instead of Integer, String or Array as a parameter to function, we will pass anonymous function or lambdas.
    //lambda expression which returns Unit-
    //code
    /*
    var lambda = { println("kotlin is cool!")}
    fun higherFunct(lmd: () -> Unit) {
    lmd()
    }
    fun main() {
    higherFunct(lambda)
    }
    */
    //output -> kotlin is cool!
    //lambda expression which returns Integer
    /* var lambda = { a:Int,b:Int -> a+b}
    fun higherFunct(lmd: (Int,Int) -> Int) {
    var result = lmd(2,4)
    println("the sum of two numbers is "+ result)
    }
    fun main() {
    higherFunct(lambda)
    } */
    //ouput /* the sum of two numbers is 6 */
    
    //passing function which returns Unit
    /* fun printMe(s: String) {
    println(s)
    }
    fun highFunc(s: String,myFunc:(String) -> Unit) {
    myFunc(s)
    }
    fun main() {
    highFunc("I am awesome",::printMe)
    } */
    //output /* I am awesome */
    
    //passing function which returns integer
    /* fun add(a: Int, b: Int): Int {
    return a+b
    }
    fun highFunc(a: Int,b: Int,add:(Int,Int)->Int) {
    println(add(a, b))
    }
    fun main(){
    highFunc(4,5,::add)
    }   */
    //output /* 9 */
    Note - we pass ::func_name while passing it to higher func whereas we pass just lambda_name 
    //function from Higher-Order function
    We can return a function from higher-order function. While returning the function, 
    we have to specify the parameter types and return type of regular function in the return type of the higher-order function.
    /* fun mul(a:Int,b:Int): String {
    return (a*b).toString()
    }
    fun highFunc() : ((Int,Int) -> String){
    return ::mul
    }
    fun main() {
    val multiply = highFunc()
    val result = multiply(20,3)
    println("result is "+result)
    } */
    //output //result is 60
    //Note - lambda and higher order func is easy just check parameters and return type values format 
//Kotlin Inline Functions
    //In Kotlin, the higher-order functions or lambda expressions, all stored as an object so memory allocation, 
    for both function objects and classes, and virtual calls might introduce runtime overhead. 
    Sometimes we can eliminate the memory overhead by inlining the lambda expression. In order
    to reduce the memory overhead of such higher-order functions or lambda expressions, we can use
    the inline keyword which ultimately requests the compiler to not
    allocate memory and simply copy the inlined code of that function at the calling place.
//Kotlin Array
    Array in Kotlinis mutable in nature with fixed size which means we can perform both read and write operations on elements of array.
    It can be of (Any) type also like mixed datatype
    //change element at particular position
        //The set() function is used to set element at particular index location.
        /* var myArray1 = arrayOf(89,10,4,6,15)
            fun main() {
            myArray1.set(0,9)
            myArray1[2] = 9
            for (i in myArray1) {
            println(i)
            }
            }   */
        //output //9 10 9 6 15
    //get element from particular position
        //get() function is used to get element from specified index.
        /* var myArray1 = arrayOf(89,10,4,6,15)
           fun main() {
           println(myArray1[2])
            println(myArray1.get(3))
           }    */
        //output //4 6          
    //initialize array
        //initialize an array of size 5 with default value as 0 and traverse its elements.
        /* var myArray1 = Array<Int>(5){0}
            var a = IntArray(5) //it will initialize array of length 5 with all elements as 0
            fun main() {
             myArray1[3] = 89
            for (i in myArray1) {
            println(i)
            }
            }   */
        //output //0 0 0 89 0           
    //traversing using range
        /* var myArray1 = arrayOf(1,2,3,4,5)
            fun main() {
            for (i in 0..myArray1.size - 1) {
            println(myArray1[i])
            }
            } */
    //output //1 2 3 4 5           
//String
    //Strings are immutable which means the length and elements cannot be changed after their creation.
    //accessing string element
        /* fun main()  {
            var str = "hello world"
            println(str[0])
            println(str[str.length-1])
            } */
        output -> h d
        /* val i = 10
            println("i is $i") //i is 10
            */
//try catch
    //try-catch block is used for exception handling in the code. 
    //Kotlin try block must be followed by either catch block or finally block or both.
    //syntax
    /* try {  
    // some code  
    }  
    catch (e: SomeException) {  
    // handler  
    }  
    finally {  
    // optional finally block
    // it will always execute
    }  */
    /* try {
        val i = 20 / 0
    } catch (e: Exception) {
        println(e)
    }
    println("code below exception") */
    //output
    /* java.lang.ArithmeticException: / by zero
    code below exception */
    
    println("code below exception")
    //Multiple catch Block
    //Kotlin multiple catch blocks are used when we are using different types of operation in try block which may causes different exceptions in try block.
    /*  var a = IntArray(5)
    try {
        a[5] = 10/0
    } catch (e : ArithmeticException) {
        println("arithmetic exception catch")
    } catch (e: ArrayIndexOutOfBoundsException) {
        println("array index OutOfBounds exception")
    } catch (e: Exception) {
        println("parent exception class")
    }
    println("code after try catch...") */
    //output 
    /* arithmetic exception catch
    code after try catch... */
    //Note: At a time only one exception is occured and at a time only one catch block is executed.
    //Rule: All catch blocks must be placed from most specific to general i.e. catch for ArithmeticException must come before catch for Exception.
    //Nested try-catch block
    //The requirement of nested try catch block is arises when a block of code generates an exception
    //and within that block another code statements also generates another exception.
    /* val nume = arrayOf(4, 8, 16, 32, 64, 128, 256, 512)
    val deno = arrayOf(2, 0, 4, 4, 0, 8)
    try {
        for (i in nume.indices) {
            try {
                println(nume[i].toString() + " / " + deno[i] + " is "+nume[i]/deno[i])
            } catch (e: ArithmeticException) {
                println("cant divide by zero")
            }
        }
    } catch (e: ArrayIndexOutOfBoundsException) {
        println("element not found")
    } */
    //output
    /* cant divide by zero
    16 / 4 is 4
    32 / 4 is 8
    cant divide by zero
    128 / 8 is 16
    element not found */
    //Kotlin finally Block
    //Kotlin finally block such block which is always executes whether exception is handled or not. So it is used to execute important code statement.
    /* try {
        val data = 5/0
        println(data)
    } catch (e: NullPointerException) {
        println(e)
    } finally {
        println("finally block always executes")
    }
    println("below codes") */
    //output
    /* finally block always executes
    Exception in thread "main" java.lang.ArithmeticException: / by zero
	at com.eegrab.kotlincoding.CodingPracticeKt.main(CodingPractice.kt:5)
	at com.eegrab.kotlincoding.CodingPracticeKt.main(CodingPractice.kt) */
